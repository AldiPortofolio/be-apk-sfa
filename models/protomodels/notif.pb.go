// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notif.proto

package protomodels

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NotifRequest struct {
	IssuerId             string   `protobuf:"bytes,1,opt,name=issuerId,proto3" json:"issuerId,omitempty"`
	FirebaseToken        string   `protobuf:"bytes,2,opt,name=firebaseToken,proto3" json:"firebaseToken,omitempty"`
	TypeMessage          string   `protobuf:"bytes,3,opt,name=typeMessage,proto3" json:"typeMessage,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifRequest) Reset()         { *m = NotifRequest{} }
func (m *NotifRequest) String() string { return proto.CompactTextString(m) }
func (*NotifRequest) ProtoMessage()    {}
func (*NotifRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc3a72a17febd07f, []int{0}
}

func (m *NotifRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifRequest.Unmarshal(m, b)
}
func (m *NotifRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifRequest.Marshal(b, m, deterministic)
}
func (m *NotifRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifRequest.Merge(m, src)
}
func (m *NotifRequest) XXX_Size() int {
	return xxx_messageInfo_NotifRequest.Size(m)
}
func (m *NotifRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifRequest proto.InternalMessageInfo

func (m *NotifRequest) GetIssuerId() string {
	if m != nil {
		return m.IssuerId
	}
	return ""
}

func (m *NotifRequest) GetFirebaseToken() string {
	if m != nil {
		return m.FirebaseToken
	}
	return ""
}

func (m *NotifRequest) GetTypeMessage() string {
	if m != nil {
		return m.TypeMessage
	}
	return ""
}

func (m *NotifRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NotifRequest)(nil), "protomodels.NotifRequest")
}

func init() { proto.RegisterFile("notif.proto", fileDescriptor_bc3a72a17febd07f) }

var fileDescriptor_bc3a72a17febd07f = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x4e, 0x85, 0x40,
	0x10, 0x45, 0x5d, 0x7d, 0x79, 0x91, 0x01, 0x9b, 0x29, 0xcc, 0x8a, 0x0d, 0x21, 0x16, 0x54, 0x4b,
	0xa2, 0x3f, 0x60, 0x63, 0xa1, 0x89, 0x16, 0xe8, 0x0f, 0x2c, 0xd9, 0x81, 0x10, 0x81, 0x45, 0x66,
	0x29, 0xf8, 0x01, 0xbf, 0xdb, 0x38, 0x44, 0xc3, 0xab, 0x76, 0xef, 0xc9, 0x9d, 0xe4, 0x1e, 0x88,
	0x47, 0x1f, 0xba, 0xc6, 0x4c, 0xb3, 0x0f, 0x1e, 0x63, 0x79, 0x06, 0xef, 0xa8, 0xe7, 0xf4, 0xb6,
	0xf5, 0xbe, 0xed, 0xa9, 0x14, 0x56, 0x2f, 0x4d, 0xf9, 0x34, 0x4c, 0x61, 0xdd, 0x9a, 0xf9, 0xb7,
	0x82, 0xe4, 0xed, 0xf7, 0xb2, 0xa2, 0xaf, 0x85, 0x38, 0x60, 0x0a, 0x97, 0x1d, 0xf3, 0x42, 0xf3,
	0xb3, 0xd3, 0x2a, 0x53, 0x45, 0x54, 0xfd, 0x67, 0xbc, 0x83, 0xab, 0xa6, 0x9b, 0xa9, 0xb6, 0x4c,
	0x1f, 0xfe, 0x93, 0x46, 0x7d, 0x2e, 0x85, 0x53, 0x88, 0x19, 0xc4, 0x61, 0x9d, 0xe8, 0x95, 0x98,
	0x6d, 0x4b, 0xfa, 0x42, 0x3a, 0x7b, 0x84, 0x08, 0x07, 0x67, 0x83, 0xd5, 0x87, 0x4c, 0x15, 0x49,
	0x25, 0xff, 0xfb, 0x17, 0x38, 0xca, 0x0e, 0xc6, 0x47, 0x88, 0xde, 0x69, 0x74, 0x92, 0xf0, 0xc6,
	0xec, 0x54, 0xcc, 0x7e, 0x69, 0x7a, 0x6d, 0x36, 0x31, 0xf3, 0x27, 0x66, 0x44, 0x2c, 0x3f, 0xab,
	0x8f, 0x42, 0x1e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x32, 0x75, 0xf2, 0x9f, 0x14, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotifsClient is the client API for Notifs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotifsClient interface {
	SendNotif(ctx context.Context, in *NotifRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type notifsClient struct {
	cc *grpc.ClientConn
}

func NewNotifsClient(cc *grpc.ClientConn) NotifsClient {
	return &notifsClient{cc}
}

func (c *notifsClient) SendNotif(ctx context.Context, in *NotifRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protomodels.Notifs/SendNotif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifsServer is the server API for Notifs service.
type NotifsServer interface {
	SendNotif(context.Context, *NotifRequest) (*empty.Empty, error)
}

// UnimplementedNotifsServer can be embedded to have forward compatible implementations.
type UnimplementedNotifsServer struct {
}

func (*UnimplementedNotifsServer) SendNotif(ctx context.Context, req *NotifRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotif not implemented")
}

func RegisterNotifsServer(s *grpc.Server, srv NotifsServer) {
	s.RegisterService(&_Notifs_serviceDesc, srv)
}

func _Notifs_SendNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifsServer).SendNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protomodels.Notifs/SendNotif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifsServer).SendNotif(ctx, req.(*NotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protomodels.Notifs",
	HandlerType: (*NotifsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotif",
			Handler:    _Notifs_SendNotif_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notif.proto",
}
